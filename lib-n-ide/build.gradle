apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        versionCode 4
        versionName "N-IDE v$versionCode"
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    sourceSets {
        main {
            res.srcDirs += "src/main/res-file-expoler"
            res.srcDirs += "src/main/res-style"
        }
    }

    dataBinding {
        enabled = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}


tasks.whenTaskAdded { task ->
    if (task.name == "assembleRelease") {
        task.finalizedBy(copyReleaseToJavaNIDE)
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.json:json:20180130'
    api fileTree(dir: 'libs', include: ['*.jar'])

    api 'com.google.code.gson:gson:2.8.1'
    api 'com.anjlab.android.iab.v3:library:1.0.44'

    api 'com.yqritc:recyclerview-flexibledivider:1.2.9'
    api 'org.apmem.tools:layouts:1.10@aar'
    api 'com.makeramen:roundedimageview:2.2.1'
    api 'com.sothree.slidinguppanel:library:3.4.0'
    //noinspection GradleDependency do not use latest version, java 8 cause crash
    api 'commons-io:commons-io:2.3'
    api 'com.simplecityapps:recyclerview-fastscroll:1.0.18'
    api 'org.apache.commons:commons-lang3:3.7'
    api 'com.google.guava:guava:25.1-android'
    api 'com.ogaclejapan.smarttablayout:library:1.6.1@aar'

    api "com.android.support:appcompat-v7:$androidSupportVersion"
    api "com.android.support:support-v4:$androidSupportVersion"
    api "com.android.support:support-vector-drawable:$androidSupportVersion"
    api "com.android.support:cardview-v7:$androidSupportVersion"
    api "com.android.support:support-annotations:$androidSupportVersion"
    api "com.android.support:design:$androidSupportVersion"
    api "com.android.support:preference-v7:$androidSupportVersion"
}


task copyReleaseToJavaNIDE {
    File javaIdeDir = new File("C:\\github\\javaide")
    if (!javaIdeDir.exists()) {
        return
    }
    final String prefix = "lib-n-ide-release";
    String oldModuleName = null;
    final String newModuleName = "$prefix-${android.defaultConfig.versionCode}";
    println "New module name $newModuleName"
    for (File f : javaIdeDir.listFiles()) {
        if (f.getName().startsWith(prefix)) {
            oldModuleName = f.getName();
            println "Old module name $oldModuleName"
            break;
        }
    }
    if (oldModuleName.equals(newModuleName)){
        println "module n-ide "
        return
    }
    File moduleDir = new File(javaIdeDir, oldModuleName);
    delete moduleDir

    moduleDir = new File(javaIdeDir, newModuleName);
    moduleDir.mkdirs();

    println "moduleDir $moduleDir"

    copy {
        from "build/outputs/aar/lib-n-ide-release.aar"
        into moduleDir
    }
    println "copy success"

    File aar = new File(moduleDir, "lib-n-ide-release.aar");
    aar.renameTo(new File(moduleDir, "${newModuleName}.aar"))
    println "rename success"

    //now modify setting.gradle
    println "modify settings.gradle"
    File settingsFile = new File(javaIdeDir, "settings.gradle");
    String content = fileToString(settingsFile);
    content = content.replace(oldModuleName, newModuleName);
    FileOutputStream output = new FileOutputStream(settingsFile);
    output.write(content.getBytes());
    output.close();

    //now modify build.gradle
    println "modify build.gradle"
    File gradleFile = new File(moduleDir, "build.gradle")
    output = new FileOutputStream(gradleFile);
    output.write(("configurations.maybeCreate(\"default\")\n" +
            "artifacts.add(\"default\", file('${newModuleName}.aar'))").getBytes());
    output.close();

    File appGradleFile = new File(javaIdeDir, "app/build.gradle");
    if (appGradleFile.exists()) {
        content = fileToString(appGradleFile);
        content = content.replace(oldModuleName, newModuleName);
        output = new FileOutputStream(appGradleFile);
        output.write(content.getBytes())
        output.close();
    }
}

String fileToString(File file) {
    FileInputStream input = new FileInputStream(file);
    final int bufferSize = 1024;
    final char[] buffer = new char[bufferSize];
    final StringBuilder out = new StringBuilder();

    Reader reader = new InputStreamReader(input, "UTF-8");
    while (true) {
        int rsz = reader.read(buffer, 0, buffer.length);
        if (rsz < 0)
            break;
        out.append(buffer, 0, rsz);
    }
    reader.close();
    input.close();
    return out.toString();

}